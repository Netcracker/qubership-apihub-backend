/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 14.1 		*/
/*  Created On : 28-Apr-2022 11:55:35 				*/
/*  DBMS       : PostgreSQL 						*/
/* ---------------------------------------------------- */

/* Drop Tables */

DROP TABLE IF EXISTS branch_draft_content CASCADE
;

DROP TABLE IF EXISTS branch_draft_reference CASCADE
;

DROP TABLE IF EXISTS project CASCADE
;

DROP TABLE IF EXISTS published_data CASCADE
;

DROP TABLE IF EXISTS published_version CASCADE
;

DROP TABLE IF EXISTS published_version_reference CASCADE
;

DROP TABLE IF EXISTS published_version_revision_content CASCADE
;

DROP TABLE IF EXISTS user_data CASCADE
;

DROP TABLE IF EXISTS user_integration CASCADE
;

/* Create Tables */

CREATE TABLE branch_draft_content
(
    project_id varchar NOT NULL,
    branch_name varchar NOT NULL,
    index integer NOT NULL   DEFAULT 0,
    name varchar NOT NULL,
    file_id varchar NOT NULL,
    path varchar NOT NULL,
    data_type varchar NOT NULL,	-- OpenAPI / Swagger / MD
    data bytea,
    media_type varchar NOT NULL,	-- HTTP media-type
    is_updated boolean NOT NULL
)
;

CREATE TABLE branch_draft_reference
(
    project_id varchar NOT NULL,
    branch_name varchar NOT NULL,
    reference_project_id varchar NOT NULL,
    reference_version varchar NOT NULL,
    relation_type varchar NOT NULL	-- INCLUDE / DEPEND
)
;

CREATE TABLE project
(
    id varchar NOT NULL,
    kind varchar NOT NULL,	-- PROJECT / GROUP
    name varchar NOT NULL,
    alias varchar NOT NULL,
    parent_id varchar NULL,	-- Only for the GROUP kind
    image_url varchar NULL,
    description text NULL,
    integration_type varchar NULL,	-- GitLab / Local storage
    default_branch varchar NULL,
    default_folder varchar NULL,
    repository_id varchar NULL,
    delete_date timestamp without time zone NULL
)
;

CREATE TABLE published_data
(
    project_id varchar NOT NULL,
    checksum varchar NOT NULL,
    media_type varchar NOT NULL,	-- HTTP media-type
    data bytea NOT NULL,
    commit_id varchar NOT NULL,
    commit_date timestamp without time zone NOT NULL
)
;

CREATE TABLE published_version
(
    project_id varchar NOT NULL,
    version varchar NOT NULL,
    revision integer NOT NULL,
    status varchar NOT NULL,	-- DRAFT / APPROVED / RELEASED / ARCHIVE
    publish_date timestamp without time zone NOT NULL,
    delete_date timestamp without time zone NULL,
    branch_name varchar NOT NULL
)
;

CREATE TABLE published_version_reference
(
    project_id varchar NOT NULL,
    version varchar NOT NULL,
    revision integer NOT NULL,
    reference_id varchar NOT NULL,
    reference_version varchar NOT NULL,
    relation_type varchar NOT NULL	-- INCLUDE / DEPEND
)
;

CREATE TABLE published_version_revision_content
(
    project_id varchar NOT NULL,
    version varchar NOT NULL,
    revision integer NOT NULL,
    checksum varchar NOT NULL,
    index integer NOT NULL   DEFAULT 0,
    file_id varchar NOT NULL,
    path varchar NOT NULL,
    slug varchar NOT NULL,
    data_type varchar NOT NULL,	-- OpenAPI / Swagger / MD
    name varchar NOT NULL,
    description text NULL
)
;

CREATE TABLE user_data
(
    user_id varchar NOT NULL,
    email varchar NULL,
    name varchar NULL,
    avatar_url varchar NULL
)
;

CREATE TABLE user_integration
(
    user_id varchar NOT NULL,
    integration_type varchar NOT NULL,	-- GitLab
    key text NULL
)
;

CREATE TABLE favorite_projects
(
    user_id varchar NOT NULL,
    project_id varchar NOT NULL
)
;

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE branch_draft_content ADD CONSTRAINT "PK_branch_draft_content"
    PRIMARY KEY (project_id,branch_name,file_id)
;

ALTER TABLE branch_draft_reference ADD CONSTRAINT "PK_branch_draft_reference"
    PRIMARY KEY (branch_name,project_id, reference_project_id, reference_version, relation_type)
;

ALTER TABLE project ADD CONSTRAINT "PK_project"
    PRIMARY KEY (id)
;

ALTER TABLE published_data ADD CONSTRAINT "PK_published_data"
    PRIMARY KEY (checksum,project_id)
;

ALTER TABLE published_version ADD CONSTRAINT "PK_published_version"
    PRIMARY KEY (project_id,version,revision)
;

ALTER TABLE published_version_reference ADD CONSTRAINT "PK_published_version_reference"
    PRIMARY KEY (project_id,version,revision,reference_id,relation_type,reference_version)
;

ALTER TABLE user_data ADD CONSTRAINT "PK_user_data"
    PRIMARY KEY (user_id)
;

ALTER TABLE user_integration ADD CONSTRAINT "PK_user_integration"
    PRIMARY KEY (user_id, integration_type)
;

ALTER TABLE favorite_projects ADD CONSTRAINT "PK_favorite_projects"
    PRIMARY KEY (user_id, project_id)
;

/* Create Foreign Key Constraints */

ALTER TABLE branch_draft_content ADD CONSTRAINT "FK_project"
    FOREIGN KEY (project_id) REFERENCES project (id) ON DELETE Restrict ON UPDATE Cascade
;

ALTER TABLE branch_draft_reference ADD CONSTRAINT "FK_project"
    FOREIGN KEY (project_id) REFERENCES project (id) ON DELETE Restrict ON UPDATE Cascade
;

ALTER TABLE project ADD CONSTRAINT "FK_parent_project_id"
    FOREIGN KEY (parent_id) REFERENCES project (id) ON DELETE Restrict ON UPDATE Cascade
;

ALTER TABLE published_version ADD CONSTRAINT "FK_project"
    FOREIGN KEY (project_id) REFERENCES project (id) ON DELETE Restrict ON UPDATE Cascade
;

ALTER TABLE published_version_reference ADD CONSTRAINT "FK_published_version"
    FOREIGN KEY (project_id,version,revision) REFERENCES published_version (project_id,version,revision) ON DELETE Restrict ON UPDATE Cascade
;

ALTER TABLE published_version_revision_content ADD CONSTRAINT "FK_published_data"
    FOREIGN KEY (checksum,project_id) REFERENCES published_data (checksum,project_id) ON DELETE Restrict ON UPDATE Cascade
;

ALTER TABLE published_version_revision_content ADD CONSTRAINT "FK_published_version_revision"
    FOREIGN KEY (project_id,version,revision) REFERENCES published_version (project_id,version,revision) ON DELETE Restrict ON UPDATE Cascade
;

/*ALTER TABLE user_integration ADD CONSTRAINT "FK_user_data"
    FOREIGN KEY (user_id) REFERENCES user_data (user_id) ON DELETE Restrict ON UPDATE Cascade
;*/

/* Create Table Comments, Sequences for Autonumber Columns */

COMMENT ON COLUMN branch_draft_content.data_type
	IS 'OpenAPI / Swagger / MD'
;

COMMENT ON COLUMN branch_draft_content.media_type
	IS 'HTTP media-type'
;

COMMENT ON COLUMN branch_draft_reference.relation_type
	IS 'INCLUDE / DEPEND'
;

COMMENT ON COLUMN project.kind
	IS 'PROJECT / GROUP'
;

COMMENT ON COLUMN project.parent_id
	IS 'Only for the GROUP kind'
;

COMMENT ON COLUMN project.integration_type
	IS 'GitLab / Local storage'
;

COMMENT ON COLUMN published_data.media_type
	IS 'HTTP media-type'
;

COMMENT ON COLUMN published_version.status
	IS 'DRAFT / APPROVED / RELEASED / ARCHIVE'
;

COMMENT ON COLUMN published_version_reference.relation_type
	IS 'INCLUDE / DEPEND'
;

COMMENT ON COLUMN published_version_revision_content.data_type
	IS 'OpenAPI / Swagger / MD'
;

COMMENT ON COLUMN user_integration.integration_type
	IS 'GitLab'
;
