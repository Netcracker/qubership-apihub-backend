// Copyright 2024-2025 NetCracker Technology Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package entity

import (
	"time"

	"github.com/Netcracker/qubership-apihub-backend/qubership-apihub-service/utils"
	"github.com/Netcracker/qubership-apihub-backend/qubership-apihub-service/view"
)

type OperationGroupEntity struct {
	tableName struct{} `pg:"operation_group"`

	PackageId        string `pg:"package_id, pk, type:varchar"`
	Version          string `pg:"version, pk, type:varchar"`
	Revision         int    `pg:"revision, pk, type:integer"`
	ApiType          string `pg:"api_type, pk, type:varchar"`
	GroupName        string `pg:"group_name, pk, type:varchar"`
	GroupId          string `pg:"group_id, type:varchar"`
	Description      string `pg:"description, type:varchar"`
	Autogenerated    bool   `pg:"autogenerated, type:boolean, use_zero"`
	TemplateChecksum string `pg:"template_checksum, type:varchar"`
	TemplateFilename string `pg:"template_filename, type:varchar"`
}

type OperationGroupTemplateEntity struct {
	tableName struct{} `pg:"operation_group_template"`

	Checksum string `pg:"checksum, pk, type:varchar"`
	Template []byte `pg:"template, type:bytea"`
}

type OperationGroupTemplateFileEntity struct {
	tableName struct{} `pg:"operation_group_template, alias:operation_group_template"`

	Template         []byte `pg:"template, type:bytea"`
	TemplateFilename string `pg:"template_filename, type:string"`
}

type OperationGroupHistoryEntity struct {
	tableName struct{} `pg:"operation_group_history"`

	GroupId   string               `pg:"group_id, type:varchar"`
	Action    string               `pg:"action, type:varchar"`
	Data      OperationGroupEntity `pg:"data, type:jsonb"`
	UserId    string               `pg:"user_id, type:varchar"`
	Date      time.Time            `pg:"date, type:type:timestamp without time zone"`
	Automatic bool                 `pg:"automatic, type:boolean, use_zero"`
}

type GroupedOperationEntity struct {
	tableName struct{} `pg:"grouped_operation"`

	GroupId     string `pg:"group_id, type:varchar"`
	PackageId   string `pg:"package_id, type:varchar"`
	Version     string `pg:"version, type:varchar"`
	Revision    int    `pg:"revision, type:integer"`
	OperationId string `pg:"operation_id, type:varchar"`
}

type OperationGroupCountEntity struct {
	tableName struct{} `pg:"operation_group, alias:operation_group"`

	OperationGroupEntity
	OperationsCount        int    `pg:"operations_count, type:integer"`
	ExportTemplateFilename string `pg:"export_template_filename, type:varchar"`
}

type OperationGroupPublishEntity struct {
	tableName struct{} `pg:"operation_group_publication, alias:operation_group_publication"`

	PublishId string `pg:"publish_id, pk, type:varchar"`
	Status    string `pg:"status, type:varchar"`
	Details   string `pg:"details, type:varchar, use_zero"`
}

func MakeOperationGroupView(ent OperationGroupCountEntity) view.OperationGroup {
	return view.OperationGroup{
		GroupName:       ent.GroupName,
		Description:     ent.Description,
		IsPrefixGroup:   ent.Autogenerated,
		OperationsCount: ent.OperationsCount,
	}
}

func MakeVersionOperationGroupView(ent OperationGroupCountEntity) view.VersionOperationGroup {
	return view.VersionOperationGroup{
		GroupName:              ent.GroupName,
		ApiType:                ent.ApiType,
		Description:            ent.Description,
		IsPrefixGroup:          ent.Autogenerated,
		OperationsCount:        ent.OperationsCount,
		ExportTemplateFilename: ent.ExportTemplateFilename,
	}
}

func MakeOperationGroupHistoryEntity(ent OperationGroupEntity, action string, userId string) *OperationGroupHistoryEntity {
	return &OperationGroupHistoryEntity{
		GroupId:   ent.GroupId,
		Action:    action,
		Data:      ent,
		UserId:    userId,
		Date:      time.Now(),
		Automatic: false,
	}
}

func MakeOperationGroupTemplateEntity(templateData []byte) *OperationGroupTemplateEntity {
	return &OperationGroupTemplateEntity{
		Checksum: utils.GetEncodedChecksum(templateData),
		Template: templateData,
	}
}
